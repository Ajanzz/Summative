class FreeType extends JPanel implements ActionListener, KeyListener {
    // Declare class fields
    private int wordCounter
    private int first
    private int timer
    private File saveData
    private ScheduledExecutorService executor
    private JLabel secondsLabel
    private JLabel wpmLabel
    private JLabel accuracyLabel
    private JLabel programWordLabel
    private JLabel secondProgramWordLabel
    private JTextField userWord
    private JButton playAgainButton
    private ArrayList<String> words
    private int frameWidth
    private int frameHeight

    // Constructor
    FreeType(int duration):
        timer = duration
        start()
        addToList()
        initialize()

    // Initialize GUI components and layout
    private void start():
        frameWidth = 1200
        frameHeight = 800
        setSize(frameWidth, frameHeight)
        JPanel panel = new JPanel()
        panel.setOpaque(false)
        panel.setLayout(null)
        setOpaque(false)
        setLayout(new BorderLayout)
        add(panel, BorderLayout.CENTER)
        // Initialize and set properties for labels, text field, and button
        panel.add(secondsLabel)
        panel.add(wpmLabel)
        panel.add(accuracyLabel)
        panel.add(programWordLabel)
        panel.add(secondProgramWordLabel)
        panel.add(userWord)
        panel.add(playAgainButton)

    // Load words from a file into the words array list
    public void addToList():
        // Read words from a file and populate the words array list

    // Initialize the game state
    public void initialize():
        playAgainButton.setVisible(false)
        playAgainButton.setEnabled(false)
        addToList()
        // Shuffle the words array list
        // Set programWordLabel and secondProgramWordLabel text
        // Update wordCounter

    // Update the timer label and handle game logic
    Runnable r = new Runnable():
        run():
            if timer > -1:
                // Update secondsLabel and decrement timer
            else:
                if timer == -1:
                    // Disable userWord field and set text to "Game over"
                    // Write game statistics to the saveData file
                if timer == -4:
                    // Display playAgainButton and enable it
                    // Shutdown the executor

    // Handle key events and game logic
    public void startGame(KeyEvent ke):
        if first == 1:
            // Schedule the executor to run the r runnable
        // Handle key events for space or enter key
        // Check if the user input matches the expected word
        // Update statistics and GUI components
        // Clear userWord field
        // Update programWordLabel and secondProgramWordLabel
        // Increment wordCounter

    // Handle button click events
    public void actionPerformed(ActionEvent e):
        if e.getSource() == playAgainButton:
            // Perform play again logic
        action = e.getActionCommand()
        // Print the action

    // Implement KeyListener methods (unused)
    public void keyTyped(KeyEvent ke):
        // Handle key typed event

    public void keyPressed(KeyEvent ke):
        // Handle key pressed event

    public void keyReleased(KeyEvent ke):
        // Handle key released event
}
