import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

class KeystrokeVisualizer extends JFrame implements KeyListener, ActionListener {
    private JLabel label
    private JButton[] keyboardButtons

    function KeystrokeVisualizer():
        call superclass constructor ("Keystroke Visualizer")
        set default close operation to EXIT_ON_CLOSE
        set size to (800, 400)
        set location relative to null

        create a new label with text "Press any key..."
        set label font to Arial, bold, size 24
        set label horizontal alignment to CENTER
        add label to content pane at NORTH

        create a new panel with grid layout of 4 rows, 14 columns, and gaps of 5 pixels
        create an array of JButtons with size 47

        create an array of Strings containing the QWERTY keyboard keys

        for i from 0 to 46:
            create a new JButton with the text from qwertyKeys at index i
            add ActionListener to the button
            set font to Arial, bold, size 18
            set focusable to false
            set background color to RGB(229, 229, 229)
            set empty border with 10 pixels padding on all sides
            set focus painted to false
            set preferred size to (50, 50)
            set foreground color to BLACK
            add button to keyboardPanel

        add keyboardPanel to content pane at CENTER

        add KeyListener to the frame
        set frame focusable to true

    function main(args):
        run the following code asynchronously:
            create a new instance of KeystrokeVisualizer
            make the visualizer frame visible

    override function keyPressed(e: KeyEvent):
        get the keyCode from the event
        get the keyText using KeyEvent.getKeyText(keyCode)
        set label text to "Pressed: " + keyText

        call highlightButton with keyText and true as arguments

    override function keyReleased(e: KeyEvent):
        get the keyCode from the event
        get the keyText using KeyEvent.getKeyText(keyCode)
        set label text to "Released: " + keyText

        call highlightButton with keyText and false as arguments

    override function keyTyped(e: KeyEvent):
        // Ignored for this example

    override function actionPerformed(e: ActionEvent):
        get the keyText from the source button's text
        set label text to "Pressed: " + keyText

        call simulateKeyPress with keyText as an argument

    function highlightButton(keyText: String, highlight: boolean):
        for each button in keyboardButtons:
            if the button's text equals keyText:
                if highlight is true:
                    set button background color to YELLOW
                else:
                    set button background color to RGB(229, 229, 229)
                break

    function simulateKeyPress(keyText: String):
        for each button in keyboardButtons:
            if the button's text equals keyText:
                simulate a button click on the button
                break
